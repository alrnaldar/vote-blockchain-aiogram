from aiogram import Dispatcher, Router, F,types
from aiogram.filters import Command,StateFilter
from aiogram.types import Message
from models.db import DB
from models.keyboards import main_keyboard,select_vote_type,poll_menu, back_to_menu,cancel, options_buttons
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from typing import Union
dp = Dispatcher()
router = Router()
options = []
my_dict = {}
class States(StatesGroup):
    settingName = State()
    settingOptions = State()
    continueorcancle = State()
    voting = State()
    sending_Vote = State()

@dp.callback_query(F.data == "to_menu")
@dp.message(Command(commands=["start"]))
async def callbacks_profile(query_or_message: Union[types.CallbackQuery, types.Message], state: FSMContext):
    user_id = str(query_or_message.from_user.id)
    await DB.create_user(user_id)

    if isinstance(query_or_message, types.CallbackQuery):
        await query_or_message.message.answer(text="–ü—Ä–∏–≤–µ—Ç", reply_markup=main_keyboard())
    elif isinstance(query_or_message, types.Message):
        await query_or_message.answer(text="–ü—Ä–∏–≤–µ—Ç", reply_markup=main_keyboard())

    await state.clear()
    
@dp.callback_query(F.data=="cancel")
@dp.message(Command(commands=["cancel"]))
async def cancel_handler(query_or_message: Union[types.CallbackQuery, types.Message], state: FSMContext): 
    current_state = await state.get_state()
    if isinstance(query_or_message, types.CallbackQuery):
        await state.clear()
        await query_or_message.message.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ‚ùó",reply_markup=back_to_menu())
    elif isinstance(query_or_message, types.Message):
        await state.clear()
        await query_or_message.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ‚ùó",reply_markup=back_to_menu())
    if current_state is None:
        await query_or_message.answer("üïê–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—èüïë")
        return
    



@dp.callback_query(F.data=="create_poll")
async def create_poll_callback(callback: types.CallbackQuery, state:FSMContext):
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",reply_markup=cancel())
    await state.set_state(States.settingName)

@dp.message(States.settingName)
async def settingName(msg:Message,state:FSMContext):
    await state.update_data(name=msg.text.casefold())
    await msg.answer(text="–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ–ª–æ—Å–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É,–±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏)\n–¥–ª—è –æ—Ç–º–µ–Ω—ã /cancel", reply_markup=cancel())
    await state.set_state(States.settingOptions)

@dp.message(States.settingOptions)
async def add_option(msg:Message,state:FSMContext):
    if msg.text.lower() != "/finish":
        options.append(msg.text.casefold())
    else:
        payload = await state.get_data()
        await msg.answer(f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n{payload["name"]}\n–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞:\n{"".join(f"{i}.{option}\n"for i,option in enumerate(options,start=1))}")
        poll_block = await DB.create_poll(name=payload["name"],user_id=msg.from_user.id)
       
        for option in options:
            await DB.create_option(poll_block=poll_block,option=option,user_id=msg.from_user.id)
    
        await msg.answer(f"‚úÖ –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ‚úÖ\n—á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ö–µ—à:\n{poll_block}",reply_markup=back_to_menu())
        await state.clear()
        options.clear()
        return
    await msg.answer(text="–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å\n–ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ /finish")

@dp.callback_query(F.data=="vote_poll")
async def vote_poll(callback: types.CallbackQuery,state:FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",reply_markup=select_vote_type())
    await state.set_state(States.voting)

@dp.callback_query(F.data=="find_by_hash",States.voting)
async def find_by_hash(callback: types.CallbackQuery,state:FSMContext):
   await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ —Ö–µ—à –±–ª–æ–∫–∞")
   
@dp.message(States.voting)
async def get_hash_from_user(msg:Message,state:FSMContext):
    poll = await DB.find_poll_by_hash(msg.text)
    if poll == False:
        await msg.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start")
    else:
        await msg.answer(f"‚úÖ–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ:\n{poll[1]}\n–•–µ—à –±–ª–æ–∫–∞:\n{poll[0]}\n", reply_markup=poll_menu())
        await state.update_data(poll_block=poll[0])

@dp.callback_query(F.data=="takepart_in_vote",States.voting)
async def takepart_in_vote(callback:types.CallbackQuery,state:FSMContext):
    # from aiogram_dialog.widgets.kbd import Button, ScrollingGroup
    # from models.keyboards import options_scrolling_group
    payload = await state.get_data()
    data = await DB.find_options_for_poll(payload["poll_block"])
    text = f"–ß—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —á–∞—Ç –Ω–æ–º–µ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n"f"{''.join([f'{index}. {name}\n' for index, (_, name, _) in enumerate(data, start=1)])}"
    await callback.message.answer(text=text, reply_markup=options_buttons(len(data)))
    for i, (hash, name, _) in enumerate(data,start=1):
        my_dict[f"{i}"]={"name": name, "hash": hash}
    
    await state.set_state(States.sending_Vote)

@dp.message(States.sending_Vote)
async def get_vote(msg:Message,state:FSMContext):
    text = msg.text.casefold()
    payload = await state.get_data()

    await DB.create_vote(my_dict[text]["hash"],payload["poll_block"],msg.from_user.id)
    await msg.answer(f'–≤—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞:\n"{my_dict[text]["name"]}"\n–•–µ—à –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞:\n{my_dict[text]["hash"]}')


@dp.message(lambda msg: msg.text == "–±–ª–æ–∫")
async def block(msg:Message):
    # from models.blockchain import blockchain
    # blockchain.add_block("a—Ñ")
    # await msg.answer("asdasdas")
    # DB.cursor.execute("SELECT * FROM blockchain ORDER BY index DESC LIMIT 1")
    # results = DB.cursor.fetchall()
    
                
    # await msg.answer(f'{results}')
    # from utils import addblock
    # await addblock.addblock("—Ç–µ—Å—Ç")
    pass
@dp.message(StateFilter(None))
async def warning(msg:Message,state:FSMContext):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –ê–ª–¥–∞—Ä–∞ –ë–∞–¥–º–∞–∂–∞–ø–æ–≤–∞\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏ /start", reply_markup=back_to_menu())
