from aiogram import Dispatcher, Router, F,types
from aiogram.filters import Command,StateFilter
from aiogram.types import Message
from models.db import DB
from models.keyboards import main_keyboard,select_vote_type,poll_menu, back_to_menu,cancel, options_buttons,takepart_and_menu,all_blocks
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from typing import Union
dp = Dispatcher()
router = Router()
options = []
my_dict = {}
class States(StatesGroup):
    settingName = State()
    settingOptions = State()
    continueorcancle = State()
    voting = State()
    sending_Vote = State()
    search_hash = State()
    looking_on_myblocks = State()

@dp.callback_query(F.data == "to_menu")
@dp.message(Command(commands=["start"]))
async def callbacks_profile(query_or_message: Union[types.CallbackQuery, types.Message], state: FSMContext):
    user_id = str(query_or_message.from_user.id)
    await DB.create_user(user_id)

    if isinstance(query_or_message, types.CallbackQuery):
        await query_or_message.message.answer(text="–°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–ª–æ–∫—á–µ–π–Ω(blockchain)", reply_markup=main_keyboard())
    elif isinstance(query_or_message, types.Message):
        await query_or_message.answer(text="–°–∏—Å—Ç–µ–º–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–ª–æ–∫—á–µ–π–Ω(blockchain)", reply_markup=main_keyboard())

    await state.clear()
    
@dp.callback_query(F.data=="cancel")
@dp.message(Command(commands=["cancel"]))
async def cancel_handler(query_or_message: Union[types.CallbackQuery, types.Message], state: FSMContext): 
    current_state = await state.get_state()
    if isinstance(query_or_message, types.CallbackQuery):
        await state.clear()
        await query_or_message.message.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ‚ùó",reply_markup=back_to_menu())
    elif isinstance(query_or_message, types.Message):
        await state.clear()
        await query_or_message.answer("‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ‚ùó",reply_markup=back_to_menu())
    if current_state is None:
        await query_or_message.answer("üïê–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –∫–∞–∫–∏–µ-–ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏—èüïë",reply_markup=back_to_menu())
        return

@dp.callback_query(F.data=="create_poll")
async def create_poll_callback(callback: types.CallbackQuery, state:FSMContext):
    await callback.message.answer("‚úèÔ∏è–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:",reply_markup=cancel())
    await state.set_state(States.settingName)

@dp.message(States.settingName)
async def settingName(msg:Message,state:FSMContext):
    await state.update_data(name=msg.text.casefold())
    await msg.answer(text="‚úèÔ∏è–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–æ–ª–æ—Å–æ–≤ (–ø–æ –æ–¥–Ω–æ–º—É,–±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏)\n–¥–ª—è –æ—Ç–º–µ–Ω—ã /cancel", reply_markup=cancel())
    await state.set_state(States.settingOptions)

@dp.message(States.settingOptions)
async def add_option(msg:Message,state:FSMContext):
    if msg.text.lower() != "/finish"  :
        payload = await state.get_data()

        opti_list = payload.get("opti", [])

        opti_list.append(msg.text)

        await state.update_data(opti=opti_list)
    else:
        payload = await state.get_data()
        await msg.answer(f"üì¢–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ:\n{payload["name"]}\n‚ùó–í–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞:\n{"".join(f"{i}.{option}\n"for i,option in enumerate(payload['opti'],start=1))}")
        poll_block = await DB.create_poll(name=payload["name"],user_id=msg.from_user.id)
       
        for option in payload["opti"]:
            await DB.create_option(poll_block=poll_block,option=option,user_id=msg.from_user.id)
    
        await msg.answer(f"‚úÖ –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ ‚úÖ\n—á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ(—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ) —ç—Ç–æ—Ç —Ö–µ—à:\n")
        await msg.answer(f"{poll_block}",reply_markup=back_to_menu())
        await state.clear()
        options.clear()
        return
    await msg.answer(text="‚ûïüòÅ–í–∞—Ä–∏–∞–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å\n–ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ /finish")

@dp.callback_query(F.data=="vote_poll")
async def vote_poll(callback: types.CallbackQuery,state:FSMContext):
    await callback.message.answer("üîç–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è",reply_markup=select_vote_type())
    await state.set_state(States.voting)

@dp.callback_query(F.data=="find_by_hash",States.voting)
async def find_by_hash(callback: types.CallbackQuery,state:FSMContext):
   await callback.message.answer("‚úèÔ∏è–£–∫–∞–∂–∏—Ç–µ —Ö–µ—à –±–ª–æ–∫–∞:")
   
@dp.message(States.voting)
async def get_hash_from_user(msg:Message,state:FSMContext):
    poll = await DB.find_poll_by_hash(msg.text)
    if poll == None:
        await msg.answer("üòû–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ —É–∫–∞–∂–∏—Ç–µ —Ö–µ—à –µ—â–µ —Ä–∞–∑.",reply_markup=back_to_menu())
    else:
        await msg.answer(f"‚úÖ–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n–ù–∞–∑–≤–∞–Ω–∏–µ:\n{poll[1]}\n–•–µ—à –±–ª–æ–∫–∞:\n{poll[0]}\n", reply_markup=poll_menu())
        await state.update_data(poll_block=poll[0])
@dp.callback_query(F.data == "show_stat_on_poll",States.voting)
async def show_stat_on_poll(callback:types.CallbackQuery, state:FSMContext):
    payload = await state.get_data()
    options = await DB.find_options_for_poll(payload["poll_block"])
    count = 0
    for i,option in enumerate(options,start=1):
        block,text,_ = option
        result = await DB.show_stat_on_poll(payload["poll_block"],block)
        count += result
        await callback.message.answer(f"{i}.{text} ||| –∫–æ–ª-–≤–æ –≥–æ–ª–æ—Å–æ–≤: {result}\n")
    await callback.message.answer(f"üì¢–í –¥–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ {count} —Ä–∞–∑(–∞)",reply_markup=takepart_and_menu())



@dp.callback_query(F.data=="takepart_in_vote",States.voting)
async def takepart_in_vote(callback:types.CallbackQuery,state:FSMContext):

    payload = await state.get_data()
    data = await DB.find_options_for_poll(payload["poll_block"])
    text = f"üì¢–ß—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n"f"{''.join([f'{index}. {name}\n' for index, (_, name, _) in enumerate(data, start=1)])}"
    await callback.message.answer(text=text, reply_markup=options_buttons(len(data)))
    for i, (hash, name, _) in enumerate(data,start=1):
        my_dict[f"{i}"]={"name": name, "hash": hash}
    
    await state.set_state(States.sending_Vote)

@dp.callback_query(lambda c: F.data.startswith("vote_"),States.sending_Vote)
async def get_vote(callback:types.CallbackQuery,state:FSMContext):
    text = callback.data
    payload = await state.get_data()

    _, vote_number = text.split("_")
    await DB.create_vote(my_dict[vote_number]["hash"], payload["poll_block"], callback.from_user.id)
    await callback.message.answer(f'üì¢–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞:üì£\n"{my_dict[vote_number]["name"]}"\n–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –≤–∞—à –≥–æ–ª–æ—Å –ø–æ —ç—Ç–æ–º—É —Ö–µ—à—É:\n')
    await callback.message.answer(f"{my_dict[vote_number]["hash"]}",reply_markup=back_to_menu())
    
    await my_dict.clear()
    await state.clear()

@dp.callback_query(F.data == "search_info_by_hash")
async def search_info_by_hash_step1(callback:types.CallbackQuery,state:FSMContext):
    await callback.message.answer("‚úèÔ∏è–£–∫–∞–∂–∏—Ç–µ —Ö–µ—à –±–ª–æ–∫–∞:")
    await state.set_state(States.search_hash)
@dp.message(States.search_hash)
async def search_info_by_hash_step2(msg:Message,state:FSMContext):
    text = msg.text
    block = await DB.search_by_hash(text)
    if block == None:
        await msg.answer(f'üòû–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–ª–æ–∫ —Å —Ö–µ—à–µ–º "{text}"',reply_markup=back_to_menu())
    else:
        await msg.answer(f'üëÄ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –±–ª–æ–∫—É —Å —Ö–µ—à–µ–ºüëÄ:\n{text}\n\nindex: {block[0]}\n\nprevious_block: {block[1]}\n\ncreated at: {block[2]}\n\ndata: {block[3]}\n\nhash: {block[4]}\n\nowner: {block[5]}',reply_markup=back_to_menu())
    await state.clear()
@dp.callback_query(F.data == "my_blocks")
async def my_blocks(callback:types.CallbackQuery,state:FSMContext):
    blocks,count = await DB.my_blocks(callback.from_user.id)
    
    if not blocks:
        await callback.message.answer("üòû–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –≤–ª–∞–¥–µ–µ—Ç–µ –Ω–∏–∫–∞–∫–∏–º–∏ –±–ª–æ–∫–∞–º–∏", reply_markup=back_to_menu())
        await state.clear()
    else:
        await state.update_data(blocks=blocks,count=count)
        await callback.message.answer(f'üòèüí∏–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º {count} –±–ª–æ–∫–æ–≤\n–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", –Ω–æ —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–∑–æ–≤–∞—Ç—å —Å–±–æ–π, –µ—Å–ª–∏ —á—Ç–æ –ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –º',reply_markup=all_blocks())
    await state.set_state(States.looking_on_myblocks)

@dp.callback_query(F.data=="show_all_blocks",States.looking_on_myblocks)
async def all_my_blocks(callback:types.CallbackQuery,state:FSMContext):
    payload = await state.get_data()
    for block in payload["blocks"]:
        index, prev_hash, timestamp, data, hash, owner = block
        formatted_block = f"Index: {index}\nPrevious_block: {prev_hash}\ncreated_at: {timestamp}\ndata: {data}\nHash: {hash}\nOwner ID: {owner}\n"
        await callback.message.answer(formatted_block)
    await callback.message.answer(f'üòèüí∏–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º {payload["count"]} –±–ª–æ–∫–æ–≤',reply_markup=back_to_menu())
@dp.message(lambda c: c.text == "–±–ª–æ–∫")
async def xxx(msg:Message):
    result = await DB.get_last_block()
    await msg.answer(f"{result}")

@dp.message(StateFilter(None))
async def warning(msg:Message,state:FSMContext):
    await msg.answer("üëãüëã–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±–ª–æ–∫—á–µ–π–Ω\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏ /start", reply_markup=back_to_menu())
